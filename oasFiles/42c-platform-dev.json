{
  "swagger": "2.0",
  "info": {
    "title": "API for platform-dev.42crunch.com platform",
    "version": "1.0"
  },
  "host": "platform-dev.42crunch.com",
  "basePath": "/",
  "schemes": ["https"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "securityDefinitions": {
    "sessionid": {
      "type": "apiKey",
      "name": "Cookie",
      "in": "header",
      "description": ""
    }
  },
  "security": [
    {
      "sessionid": []
    }
  ],
  "paths": {
    "/api/v1/apis": {
      "post": {
        "summary": "INPUT:\nUser Id and User Oid: representing the user identity requesting its list\nname: Collection name\nisShared: is the collection public to the organization or not.\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name\norganisation: the org infos\nisShared: is the collection public to the organization or not.\nnumApis: number of Apis in the collection.\naccess: current access right for the user seeing that collection\n(always r/w here).\nor an error.",
        "description": "Create a new API",
        "operationId": "CreateAPI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiApi"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiApiDescriptor"
            }
          }
        ],
        "tags": ["ApiManager"]
      }
    },
    "/api/v1/apis/{id}": {
      "get": {
        "summary": "INPUT:\nUser Id: representing the user identity requesting its list\nid: Collection Id\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name\norganisation: the org infos\nisShared: is the collection public to the organization or not.\nnumApis: number of Apis in the collection.\naccess: current access right for the user seeing that collection\n(always r/w here).\nor an error.",
        "description": "Read an existing API",
        "operationId": "ReadAPI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiApi"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cid",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "specfile",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": ["ApiManager"]
      },
      "delete": {
        "summary": "INPUT:\nUser Id: representing the user identity requesting its list\nid: Collection Id\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name",
        "description": "Delete an existing API",
        "operationId": "DeleteAPI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiApiDescriptor"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cid",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "specfile",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": ["ApiManager"]
      },
      "put": {
        "description": "Update an existing API",
        "operationId": "UpdateAPI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiApi"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiApiDescriptor"
            }
          }
        ],
        "tags": ["ApiManager"]
      }
    },
    "/api/v1/apis/{id}/assess": {
      "get": {
        "summary": "INPUT:\nSession Id or Api Key: representing the user identity requesting its list\n------------------------\nOUTPUT:\nnum: the number of element in the returned list\nlist: an array of Collection \nor an error.",
        "description": "Execute security assessment of the OAS File attached to the API",
        "operationId": "Assess",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTask"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cid",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "specfile",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": ["TaskManager"]
      }
    },
    "/api/v1/apis/{id}/assessmentreport": {
      "get": {
        "summary": "INPUT:\nUser Id and User Oid: representing the user identity requesting its list\nname: Collection name\nisShared: is the collection public to the organization or not.\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name\norganisation: the org infos\nisShared: is the collection public to the organization or not.\nnumApis: number of Apis in the collection.\naccess: current access right for the user seeing that collection\n(always r/w here).\nor an error.",
        "description": "Retrieve the latest OAS assessment report",
        "operationId": "AssessmentReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReport"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cid",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "specfile",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": ["ReportManager"]
      }
    },
    "/api/v1/apis/{id}/protection": {
      "post": {
        "summary": "INPUT:\nUser Id: representing the user identity requesting its list\nid: Collection Id\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name\norganisation: the org infos\nisShared: is the collection public to the organization or not.\nnumApis: number of Apis in the collection.\naccess: current access right for the user seeing that collection\n(always r/w here).\nor an error.",
        "description": "Prepare a new protection profile for the specified API",
        "operationId": "Protect",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTask"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiApiDescriptor"
            }
          }
        ],
        "tags": ["TaskManager"]
      }
    },
    "/api/v1/apis/{id}/protection/report": {
      "get": {
        "summary": "INPUT:\nUser Id: representing the user identity requesting its list\nid: Collection Id\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name\norganisation: the org infos\nisShared: is the collection public to the organization or not.\nnumApis: number of Apis in the collection.\naccess: current access right for the user seeing that collection\n(always r/w here).\nor an error.",
        "description": "Retrieve details of the latest protection policy",
        "operationId": "ProtectionReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReport"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cid",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "specfile",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": ["ReportManager"]
      }
    },
    "/api/v1/apis/{id}/protection/status": {
      "get": {
        "description": "Retrieve live updates on API usage and protection metrics",
        "operationId": "Status",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/typesStatusReport"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "prot_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": ["ProtectionManager"]
      }
    },
    "/api/v1/apis/{id}/protection/tokens": {
      "get": {
        "summary": "INPUT:\nSession Id or Api Key: representing the user identity requesting its list\n------------------------\nOUTPUT:\nnum: the number of element in the returned list\nlist: an array of Collection \nor an error.",
        "description": "List protection tokens for this API",
        "operationId": "ListTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/typesProtTokenList"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "prot_id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": ["ProtectionManager"]
      },
      "post": {
        "summary": "INPUT:\nUser Id and User Oid: representing the user identity requesting its list\nname: Collection name\nisShared: is the collection public to the organization or not.\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name\norganisation: the org infos\nisShared: is the collection public to the organization or not.\nnumApis: number of Apis in the collection.\naccess: current access right for the user seeing that collection\n(always r/w here).\nor an error.",
        "description": "Create a new protection token for this API",
        "operationId": "CreateToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/typesProtTokenMData"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/typesProtTokenMData"
            }
          }
        ],
        "tags": ["ProtectionManager"]
      }
    },
    "/api/v1/apis/{id}/protection/tokens/{prot_id}": {
      "delete": {
        "summary": "INPUT:\nUser Id: representing the user identity requesting its list\nid: Collection Id\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name\norganisation: the org infos\nisShared: is the collection public to the organization or not.\nnumApis: number of Apis in the collection.\naccess: current access right for the user seeing that collection\n(always r/w here).\nor an error.",
        "description": "Delete an existing API protection token",
        "operationId": "DeleteToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/typesProtTokenMData"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "prot_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": ["ProtectionManager"]
      }
    },
    "/api/v1/apis/{id}/scan": {
      "post": {
        "summary": "INPUT:\nUser Id and User Oid: representing the user identity requesting its list\nname: Collection name\nisShared: is the collection public to the organization or not.\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name\norganisation: the org infos\nisShared: is the collection public to the organization or not.\nnumApis: number of Apis in the collection.\naccess: current access right for the user seeing that collection\n(always r/w here).\nor an error.",
        "description": "Create a new API scan",
        "operationId": "Scan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTask"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiApiDescriptor"
            }
          }
        ],
        "tags": ["TaskManager"]
      }
    },
    "/api/v1/apis/{id}/scanreport": {
      "get": {
        "summary": "INPUT:\nSession Id or Api Key: representing the user identity requesting its list\n------------------------\nOUTPUT:\nnum: the number of element in the returned list\nlist: an array of Collection \nor an error.",
        "description": "Retrieve the latest scan report",
        "operationId": "ScanReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiReport"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cid",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "specfile",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": ["ReportManager"]
      }
    },
    "/api/v1/apis/{id}/specs": {
      "post": {
        "summary": "XXX no idea where to put that, but it's API related..\nwe might change the call name, url and the post wont change nonetheless..\nit's generated remember :)",
        "description": "Get specs from the OAS file attached to the API",
        "operationId": "SpecFileInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiSpecs"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiSpecFilter"
            }
          }
        ],
        "tags": ["ApiManager"]
      }
    },
    "/api/v1/collections": {
      "get": {
        "summary": "INPUT:\nSession Id or Api Key: representing the user identity requesting its list\n------------------------\nOUTPUT:\nnum: the number of element in the returned list\nlist: an array of Collection \nor an error.",
        "description": "List existing API Collection",
        "operationId": "ListAPICollection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCollectionList"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "tags": ["CollectionManager"]
      },
      "post": {
        "summary": "INPUT:\nUser Id and User Oid: representing the user identity requesting its list\nname: Collection name\nisShared: is the collection public to the organization or not.\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name\norganisation: the org infos\nisShared: is the collection public to the organization or not.\nnumApis: number of Apis in the collection.\naccess: current access right for the user seeing that collection\n(always r/w here).\nor an error.",
        "description": "Create a new API Collection",
        "operationId": "CreateAPICollection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCollection"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCollectionDescriptor"
            }
          }
        ],
        "tags": ["CollectionManager"]
      }
    },
    "/api/v1/collections/{id}": {
      "get": {
        "summary": "INPUT:\nUser Id: representing the user identity requesting its list\nid: Collection Id\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name\norganisation: the org infos\nisShared: is the collection public to the organization or not.\nnumApis: number of Apis in the collection.\naccess: current access right for the user seeing that collection\n(always r/w here).\nor an error.",
        "description": "Read an existing API Collection",
        "operationId": "ReadAPICollection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCollection"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isShared",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": ["CollectionManager"]
      },
      "delete": {
        "summary": "INPUT:\nUser Id: representing the user identity requesting its list\nid: Collection Id\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name",
        "description": "Delete an existing API Collection",
        "operationId": "DeleteAPICollection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCollectionDescriptor"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isShared",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": ["CollectionManager"]
      },
      "put": {
        "description": "Update an existing Collection",
        "operationId": "UpdateAPICollection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCollection"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCollectionDescriptor"
            }
          }
        ],
        "tags": ["CollectionManager"]
      }
    },
    "/api/v1/collections/{id}/apis": {
      "get": {
        "summary": "INPUT:\nSession Id or Api Key: representing the user identity requesting its list\n------------------------\nOUTPUT:\nnum: the number of element in the returned list\nlist: an array of Collection \nor an error.",
        "description": "List APIs in a Collection",
        "operationId": "ListAPI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiApiList"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isShared",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": ["ApiManager"]
      }
    },
    "/api/v1/login": {
      "post": {
        "summary": "INPUT:\nSession Id or Api Key: representing the user identity requesting its list\n------------------------\nOUTPUT:\nnum: the number of element in the returned list\nlist: an array of Collection \nor an error.",
        "description": "Login a new user - return a session cookie",
        "operationId": "Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/typesSession"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authLoginData"
            }
          }
        ],
        "tags": ["AuthManager"]
      }
    },
    "/api/v1/logout": {
      "post": {
        "summary": "INPUT:\nUser Id and User Oid: representing the user identity requesting its list\nname: Collection name\nisShared: is the collection public to the organization or not.\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name\norganisation: the org infos\nisShared: is the collection public to the organization or not.\nnumApis: number of Apis in the collection.\naccess: current access right for the user seeing that collection\n(always r/w here).\nor an error.",
        "description": "Logout a connected user",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/typesEmpty"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/typesEmpty"
            }
          }
        ],
        "tags": ["AuthManager"]
      }
    },
    "/api/v1/tokens": {
      "get": {
        "summary": "INPUT:\nSession Id or Api Key: representing the user identity requesting its list\n------------------------\nOUTPUT:\nnum: the number of element in the returned list\nlist: an array of Collection \nor an error.",
        "description": "List existing user's API key",
        "operationId": "ListAPIToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTokenList"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "tags": ["TokenManager"]
      },
      "post": {
        "summary": "INPUT:\nUser Id and User Oid: representing the user identity requesting its list\nname: Collection name\nisShared: is the collection public to the organization or not.\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name\norganisation: the org infos\nisShared: is the collection public to the organization or not.\nnumApis: number of Apis in the collection.\naccess: current access right for the user seeing that collection\n(always r/w here).\nor an error.",
        "description": "Create a new API key for a connected user",
        "operationId": "CreateAPIToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTokenDescriptor"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiTokenDescriptor"
            }
          }
        ],
        "tags": ["TokenManager"]
      }
    },
    "/api/v1/tokens/{id}": {
      "delete": {
        "summary": "INPUT:\nUser Id: representing the user identity requesting its list\nid: Collection Id\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name\norganisation: the org infos\nisShared: is the collection public to the organization or not.\nnumApis: number of Apis in the collection.\naccess: current access right for the user seeing that collection\n(always r/w here).\nor an error.",
        "description": "Delete an existing API key",
        "operationId": "DeleteAPIToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiTokenDescriptor"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "flags.assess",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "flags.scan",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "flags.protect",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "flags.list",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "flags.delete",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": ["TokenManager"]
      }
    },
    "/api/v1/users": {
      "get": {
        "summary": "INPUT:\nSession Id or Api Key: representing the user identity requesting its list\n------------------------\nOUTPUT:\nnum: the number of element in the returned list\nlist: an array of Collection \nor an error.",
        "description": "List existing users",
        "operationId": "ListUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserList"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "tags": ["UserManager"]
      },
      "post": {
        "summary": "INPUT:\nUser Id and User Oid: representing the user identity requesting its list\nname: Collection name\nisShared: is the collection public to the organization or not.\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name\norganisation: the org infos\nisShared: is the collection public to the organization or not.\nnumApis: number of Apis in the collection.\naccess: current access right for the user seeing that collection\n(always r/w here).\nor an error.",
        "description": "Create a new user",
        "operationId": "CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserDescriptor"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          }
        ],
        "tags": ["UserManager"]
      }
    },
    "/api/v1/users/{name}": {
      "get": {
        "summary": "INPUT:\nUser Id: representing the user identity requesting its list\nid: Collection Id\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name\norganisation: the org infos\nisShared: is the collection public to the organization or not.\nnumApis: number of Apis in the collection.\naccess: current access right for the user seeing that collection\n(always r/w here).\nor an error.",
        "description": "Read an existing user profile",
        "operationId": "ReadUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUser"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "string id = 1; // IsUUID()",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": ["UserManager"]
      },
      "delete": {
        "summary": "XXX no idea where to put that, but it's API related..\nwe might change the call name, url and the post wont change nonetheless..\nit's generated remember :)",
        "description": "Delete an existing user",
        "operationId": "DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiUserDescriptor"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "string id = 1; // IsUUID()",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": ["UserManager"]
      }
    },
    "/api/v1/users/{name}/passwd": {
      "put": {
        "summary": "INPUT:\nUser Id: representing the user identity requesting its list\nid: Collection Id\n------------------------\nOUTPUT:\nid: the collection id\nname: the collection name",
        "description": "Changer user password",
        "operationId": "Passwd",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/typesEmpty"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUserPassword"
            }
          }
        ],
        "tags": ["UserManager"]
      }
    },
    "/api/v1/version": {
      "get": {
        "summary": "INPUT:\nSession Id or Api Key: representing the user identity requesting its list\n------------------------\nOUTPUT:\nnum: the number of element in the returned list\nlist: an array of Collection \nor an error.",
        "description": "Retreive version of the platform",
        "operationId": "Version",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiPlatformInformation"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "tags": ["Platform"]
      }
    }
  },
  "definitions": {
    "ReportFormat": {
      "type": "string",
      "enum": ["JSON", "PDF", "HTML"],
      "default": "JSON"
    },
    "apiApi": {
      "type": "object",
      "properties": {
        "desc": {
          "$ref": "#/definitions/apiApiDescriptor"
        },
        "assessment": {
          "$ref": "#/definitions/apiAssessSummary",
          "title": "string id = 1;\nstring name = 2;\nstring description = 3;\nXXX more to come"
        },
        "scan": {
          "$ref": "#/definitions/apiScanSummary"
        },
        "protect": {
          "$ref": "#/definitions/apiProtectSummary"
        }
      }
    },
    "apiApiDescriptor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "cid": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "specfile": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "apiApiList": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "format": "int64"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiApi"
          }
        }
      }
    },
    "apiAssessSummary": {
      "type": "object",
      "properties": {
        "isProcessed": {
          "type": "boolean",
          "format": "boolean"
        },
        "last": {
          "type": "string"
        },
        "error": {
          "type": "boolean",
          "format": "boolean"
        },
        "isValid": {
          "type": "boolean",
          "format": "boolean"
        },
        "grade": {
          "type": "number",
          "format": "double"
        },
        "numErrors": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "apiCollection": {
      "type": "object",
      "properties": {
        "desc": {
          "$ref": "#/definitions/apiCollectionDescriptor"
        },
        "summary": {
          "$ref": "#/definitions/apiCollectionSummary"
        }
      }
    },
    "apiCollectionDescriptor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "isShared": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "title": "Collection"
    },
    "apiCollectionList": {
      "type": "object",
      "properties": {
        "num": {
          "type": "integer",
          "format": "int64"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiCollection"
          }
        }
      }
    },
    "apiCollectionSummary": {
      "type": "object",
      "properties": {
        "org": {
          "$ref": "#/definitions/apiOrgDescriptor"
        },
        "read": {
          "type": "boolean",
          "format": "boolean"
        },
        "write": {
          "type": "boolean",
          "format": "boolean"
        },
        "apis": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiOrgDescriptor": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "apiPlatformInformation": {
      "type": "object",
      "properties": {
        "User": {
          "type": "string"
        },
        "Host": {
          "type": "string"
        },
        "Branch": {
          "type": "string"
        },
        "Commit": {
          "type": "string"
        }
      }
    },
    "apiProtectSummary": {
      "type": "object",
      "properties": {
        "isProcessed": {
          "type": "boolean",
          "format": "boolean"
        },
        "numContainers": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "apiReport": {
      "type": "object",
      "properties": {
        "tid": {
          "type": "string",
          "title": "string id = 1;"
        },
        "aid": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "description": "string oid = 3; // XXX Already removed from apid..."
        },
        "data": {
          "type": "string",
          "format": "byte"
        },
        "type": {
          "$ref": "#/definitions/ReportFormat"
        },
        "enc": {
          "type": "string"
        },
        "attr": {
          "$ref": "#/definitions/apiReportAttributes",
          "title": "types.Engine engine = 8; // XXX TODO : See with taskD to unify enum"
        }
      }
    },
    "apiReportAttributes": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "apiScanSummary": {
      "type": "object",
      "properties": {
        "isProcessed": {
          "type": "boolean",
          "format": "boolean"
        },
        "last": {
          "type": "string"
        },
        "numHighs": {
          "type": "integer",
          "format": "int32"
        },
        "numMediums": {
          "type": "integer",
          "format": "int32"
        },
        "numLows": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "apiSpecEndpoint": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      },
      "title": "Message related to API Spec file call"
    },
    "apiSpecFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "filter": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "apiSpecOperation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiSpecParam"
          }
        }
      }
    },
    "apiSpecParam": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "in": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "apiSpecPath": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "full": {
          "type": "string"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiSpecOperation"
          }
        }
      }
    },
    "apiSpecs": {
      "type": "object",
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiSpecEndpoint"
          }
        },
        "basePath": {
          "type": "string"
        },
        "paths": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiSpecPath"
          }
        },
        "description": {
          "type": "string"
        }
      }
    },
    "apiTask": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "success": {
          "type": "boolean",
          "format": "boolean"
        }
      },
      "title": "XXX TBD"
    },
    "apiTokenDescriptor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "flags": {
          "$ref": "#/definitions/apiTokenFlags"
        }
      }
    },
    "apiTokenFlags": {
      "type": "object",
      "properties": {
        "assess": {
          "type": "boolean",
          "format": "boolean"
        },
        "scan": {
          "type": "boolean",
          "format": "boolean"
        },
        "protect": {
          "type": "boolean",
          "format": "boolean"
        },
        "list": {
          "type": "boolean",
          "format": "boolean"
        },
        "delete": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiTokenList": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiTokenDescriptor"
          }
        }
      }
    },
    "apiUser": {
      "type": "object",
      "properties": {
        "desc": {
          "$ref": "#/definitions/apiUserDescriptor"
        },
        "flags": {
          "$ref": "#/definitions/apiUserFlags"
        },
        "data": {
          "$ref": "#/definitions/apiUserData"
        },
        "summary": {
          "$ref": "#/definitions/apiUserSummary"
        }
      }
    },
    "apiUserData": {
      "type": "object",
      "properties": {
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "apiUserDescriptor": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "string id = 1; // IsUUID()"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "apiUserFlags": {
      "type": "object",
      "properties": {
        "admin": {
          "type": "boolean",
          "format": "boolean"
        },
        "change": {
          "type": "boolean",
          "format": "boolean"
        },
        "lock": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "apiUserList": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiUser"
          }
        }
      }
    },
    "apiUserPassword": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "current": {
          "type": "string"
        },
        "new": {
          "type": "string"
        }
      },
      "title": "XXX may be we should have an Authentication Manager / which \nwil lhandle password change and 2FA authentication setup"
    },
    "apiUserSummary": {
      "type": "object",
      "properties": {
        "api": {
          "type": "integer",
          "format": "int64"
        },
        "collection": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "authLoginData": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "title": "Login.\nTODO to convert in types.Auth kind of stuff"
    },
    "typesClientDetails": {
      "type": "object",
      "properties": {
        "registration_id": {
          "type": "string"
        },
        "registration_time": {
          "type": "string"
        },
        "env_vars": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesEnvVar"
          }
        }
      }
    },
    "typesEmpty": {
      "type": "object"
    },
    "typesEnvVar": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "typesMsg": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "typesProtTokenList": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesProtTokenMData"
          }
        }
      }
    },
    "typesProtTokenMData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "prot_id": {
          "type": "string"
        }
      }
    },
    "typesSession": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "typesStatusReport": {
      "type": "object",
      "properties": {
        "aid": {
          "type": "string"
        },
        "clients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesClientDetails"
          }
        }
      }
    }
  }
}
